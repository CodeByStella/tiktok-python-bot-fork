"""
This type stub file was generated by pyright.
"""

from typing import Iterator, List, Optional
from seleniumwire.request import Request, Response, WebSocketMessage

log = ...
REMOVE_DATA_OLDER_THAN_DAYS = ...
def create(*, memory_only: bool = ..., **kwargs): # -> InMemoryRequestStorage | RequestStorage:
    """Create a new storage instance.

    Args:
        memory_only: When True, an in-memory implementation will be used which stores
            request data in memory only and nothing on disk. Default False.
        kwargs: Any arguments to initialise the storage with:
            - base_dir: The base directory under which requests are stored
            - maxsize: The maximum number of requests the storage can hold
    Returns: A request storage implementation, currently either RequestStorage (default)
        or InMemoryRequestStorage when memory_only is set to True.
    """
    ...

class _IndexedRequest:
    def __init__(self, id: str, url: str, has_response: bool) -> None:
        ...
    


class RequestStorage:
    """Responsible for persistence of request and response data to disk.

    This implementation writes the request and response data to disk, but keeps an in-memory
    index for sequencing and fast retrieval.

    Instances are designed to be threadsafe.
    """
    def __init__(self, base_dir: Optional[str] = ...) -> None:
        """Initialises a new RequestStorage using an optional base directory.

        Args:
            base_dir: The directory where request and response data is stored.
                If not specified, the system temp folder is used.
        """
        ...
    
    def save_request(self, request: Request) -> None:
        """Save a request to storage.

        Args:
            request: The request to save.
        """
        ...
    
    def save_response(self, request_id: str, response: Response) -> None:
        """Save a response to storage against a request with the specified id.

        Args:
            request_id: The id of the original request.
            response: The response to save.
        """
        ...
    
    def save_ws_message(self, request_id: str, message: WebSocketMessage) -> None:
        """Save a websocket message against a request with the specified id.

        Args:
            request_id: The id of the original handshake request.
            message: The websocket message to save.
        """
        ...
    
    def save_har_entry(self, request_id: str, entry: dict) -> None:
        """Save a HAR entry to storage against a request with the specified id.

        Args:
            request_id: The id of the original request.
            entry: The HAR entry to save.
        """
        ...
    
    def load_requests(self) -> List[Request]:
        """Load all previously saved requests known to the storage (known to its index).

        The requests are returned as a list of request objects in the order in which they
        were saved. Each request will have any associated response and websocket messages
        attached if they exist.

        Returns: A list of request objects.
        """
        ...
    
    def load_last_request(self) -> Optional[Request]:
        """Load the last saved request.

        Returns: The last saved request or None if no requests have
            yet been stored.
        """
        ...
    
    def load_har_entries(self) -> List[dict]:
        """Load all HAR entries known to this storage.

        Returns: A list of HAR entries.
        """
        ...
    
    def iter_requests(self) -> Iterator[Request]:
        """Return an iterator of requests known to the storage.

        Returns: An iterator of request objects.
        """
        ...
    
    def clear_requests(self) -> None:
        """Clear all requests currently known to this storage."""
        ...
    
    def find(self, pat: str, check_response: bool = ...) -> Optional[Request]:
        """Find the first request that matches the specified pattern.

        Requests are searched in chronological order.

        Args:
            pat: A pattern that will be searched in the request URL.
            check_response: When a match is found, whether to check that the request has
                a corresponding response. Where check_response=True and no response has
                been received, this method will skip the request and continue searching.

        Returns: The first request in the storage that matches the pattern,
            or None if no requests match.
        """
        ...
    
    def cleanup(self) -> None:
        """Remove all stored requests, the storage directory containing those
        requests, and if that is the only storage directory, also the top level
        parent directory.
        """
        ...
    


class InMemoryRequestStorage:
    """Keeps request and response data in memory only.

    By default there is no limit on the number of requests that will be stored. This can
    be adjusted with the 'maxsize' attribute when creating a new instance.

    Instances are designed to be threadsafe.
    """
    def __init__(self, base_dir: Optional[str] = ..., maxsize: Optional[int] = ...) -> None:
        """Initialise a new InMemoryRequestStorage.

        Args:
            base_dir: The directory where certificate data is stored.
                If not specified, the system temp folder is used.
            maxsize: The maximum number of requests to store. Default no limit.
                When this attribute is set and the storage reaches the specified maximum
                size, old requests are discarded sequentially as new requests arrive.
        """
        ...
    
    def save_request(self, request: Request) -> None:
        """Save a request to storage.

        Args:
            request: The request to save.
        """
        ...
    
    def save_response(self, request_id: str, response: Response) -> None:
        """Save a response to storage against a request with the specified id.

        Any certificate information will be attached to the original request
        against the request.cert attribute.

        Args:
            request_id: The id of the original request.
            response: The response to save.
        """
        ...
    
    def save_ws_message(self, request_id: str, message: WebSocketMessage) -> None:
        """Save a websocket message against a request with the specified id.

        Args:
            request_id: The id of the original handshake request.
            message: The websocket message to save.
        """
        ...
    
    def save_har_entry(self, request_id: str, entry: dict) -> None:
        """Save a HAR entry to storage against a request with the specified id.

        Args:
            request_id: The id of the original request.
            entry: The HAR entry to save.
        """
        ...
    
    def load_requests(self) -> List[Request]:
        """Load all previously saved requests.

        The requests are returned as a list of request objects in the order in which they
        were saved.

        Note that for efficiency request objects are not copied when returned, so any
        change made to a request will also affect the stored version.

        Returns: A list of request objects.
        """
        ...
    
    def load_last_request(self) -> Optional[Request]:
        """Load the last saved request.

        Returns: The last saved request or None if no requests have
            yet been stored.
        """
        ...
    
    def load_har_entries(self) -> List[dict]:
        """Load all previously saved HAR entries.

        Returns: A list of HAR entries.
        """
        ...
    
    def iter_requests(self) -> Iterator[Request]:
        """Return an iterator over the saved requests.

        Returns: An iterator of request objects.
        """
        ...
    
    def clear_requests(self) -> None:
        """Clear all previously saved requests."""
        ...
    
    def find(self, pat: str, check_response: bool = ...) -> Optional[Request]:
        """Find the first request that matches the specified pattern.

        Requests are searched in chronological order.

        Args:
            pat: A pattern that will be searched in the request URL.
            check_response: When a match is found, whether to check that the request has
                a corresponding response. Where check_response=True and no response has
                been received, this method will skip the request and continue searching.

        Returns: The first request in the storage that matches the pattern,
            or None if no requests match.
        """
        ...
    
    def cleanup(self) -> None:
        """Clear all previously saved requests."""
        ...
    


