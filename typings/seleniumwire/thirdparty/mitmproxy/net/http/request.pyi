"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Dict, Iterable, Optional, Tuple, Union
from seleniumwire.thirdparty.mitmproxy.coretypes import multidict
from seleniumwire.thirdparty.mitmproxy.net.http import cookies, message
from seleniumwire.thirdparty.mitmproxy.net.http.headers import Headers

@dataclass
class RequestData(message.MessageData):
    host: str
    port: int
    method: bytes
    scheme: bytes
    authority: bytes
    path: bytes
    ...


class Request(message.Message):
    """
    An HTTP request.
    """
    data: RequestData
    def __init__(self, host: str, port: int, method: bytes, scheme: bytes, authority: bytes, path: bytes, http_version: bytes, headers: Union[Headers, Tuple[Tuple[bytes, bytes], ...]], content: Optional[bytes], trailers: Union[None, Headers, Tuple[Tuple[bytes, bytes], ...]], timestamp_start: float, timestamp_end: Optional[float]) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @classmethod
    def make(cls, method: str, url: str, content: Union[bytes, str] = ..., headers: Union[Headers, Dict[Union[str, bytes], Union[str, bytes]], Iterable[Tuple[bytes, bytes]]] = ...) -> Request:
        """
        Simplified API for creating request objects.
        """
        ...
    
    @property
    def first_line_format(self) -> str:
        """
        HTTP request form as defined in `RFC7230 <https://tools.ietf.org/html/rfc7230#section-5.3>`_.

        origin-form and asterisk-form are subsumed as "relative".
        """
        ...
    
    @property
    def method(self) -> str:
        """
        HTTP request method, e.g. "GET".
        """
        ...
    
    @method.setter
    def method(self, val: Union[str, bytes]) -> None:
        ...
    
    @property
    def scheme(self) -> str:
        """
        HTTP request scheme, which should be "http" or "https".
        """
        ...
    
    @scheme.setter
    def scheme(self, val: Union[str, bytes]) -> None:
        ...
    
    @property
    def authority(self) -> str:
        """
        HTTP request authority.

        For HTTP/1, this is the authority portion of the request target
        (in either absolute-form or authority-form)

        For HTTP/2, this is the :authority pseudo header.
        """
        ...
    
    @authority.setter
    def authority(self, val: Union[str, bytes]) -> None:
        ...
    
    @property
    def host(self) -> str:
        """
        Target host. This may be parsed from the raw request
        (e.g. from a ``GET http://example.com/ HTTP/1.1`` request line)
        or inferred from the mitmproxy mode (e.g. an IP in transparent mode).

        Setting the host attribute also updates the host header and authority information, if present.
        """
        ...
    
    @host.setter
    def host(self, val: Union[str, bytes]) -> None:
        ...
    
    @property
    def host_header(self) -> Optional[str]:
        """
        The request's host/authority header.

        This property maps to either ``request.headers["Host"]`` or
        ``request.authority``, depending on whether it's HTTP/1.x or HTTP/2.0.
        """
        ...
    
    @host_header.setter
    def host_header(self, val: Union[None, str, bytes]) -> None:
        ...
    
    @property
    def port(self) -> int:
        """
        Target port
        """
        ...
    
    @port.setter
    def port(self, port: int) -> None:
        ...
    
    @property
    def path(self) -> str:
        """
        HTTP request path, e.g. "/index.html".
        Usually starts with a slash, except for OPTIONS requests, which may just be "*".
        """
        ...
    
    @path.setter
    def path(self, val: Union[str, bytes]) -> None:
        ...
    
    @property
    def url(self) -> str:
        """
        The URL string, constructed from the request's URL components.
        """
        ...
    
    @url.setter
    def url(self, val: Union[str, bytes]) -> None:
        ...
    
    @property
    def pretty_host(self) -> str:
        """
        Similar to :py:attr:`host`, but using the host/:authority header as an additional (preferred) data source.
        This is useful in transparent mode where :py:attr:`host` is only an IP address,
        but may not reflect the actual destination as the Host header could be spoofed.
        """
        ...
    
    @property
    def pretty_url(self) -> str:
        """
        Like :py:attr:`url`, but using :py:attr:`pretty_host` instead of :py:attr:`host`.
        """
        ...
    
    @property
    def query(self) -> multidict.MultiDictView:
        """
        The request query string as an
        :py:class:`~seleniumwire.thirdparty.mitmproxy.net.multidict.MultiDictView` object.
        """
        ...
    
    @query.setter
    def query(self, value): # -> None:
        ...
    
    @property
    def cookies(self) -> multidict.MultiDictView:
        """
        The request cookies.

        An empty :py:class:`~seleniumwire.thirdparty.mitmproxy.net.multidict.MultiDictView` object
        if the cookie monster ate them all.
        """
        ...
    
    @cookies.setter
    def cookies(self, value): # -> None:
        ...
    
    @property
    def path_components(self): # -> tuple[str, ...]:
        """
        The URL's path components as a tuple of strings.
        Components are unquoted.
        """
        ...
    
    @path_components.setter
    def path_components(self, components): # -> None:
        ...
    
    def anticache(self) -> None:
        """
        Modifies this request to remove headers that might produce a cached
        response. That is, we remove ETags and If-Modified-Since headers.
        """
        ...
    
    def anticomp(self) -> None:
        """
        Modifies this request to remove headers that will compress the
        resource's data.
        """
        ...
    
    def constrain_encoding(self) -> None:
        """
        Limits the permissible Accept-Encoding values, based on what we can
        decode appropriately.
        """
        ...
    
    @property
    def urlencoded_form(self): # -> MultiDictView:
        """
        The URL-encoded form data as an :py:class:`~seleniumwire.thirdparty.mitmproxy.net.multidict.MultiDictView`
        object. An empty multidict.MultiDictView if the content-type indicates non-form data or the content could
        not be parsed.

        Starting with mitmproxy 1.0, key and value are strings.
        """
        ...
    
    @urlencoded_form.setter
    def urlencoded_form(self, value): # -> None:
        ...
    
    @property
    def multipart_form(self): # -> MultiDictView:
        """
        The multipart form data as an :py:class:`~seleniumwire.thirdparty.mitmproxy.net.multidict.MultiDictView`
        object. An empty multidict.MultiDictView if the content-type indicates non-form data or the content could
        not be parsed.

        Key and value are bytes.
        """
        ...
    
    @multipart_form.setter
    def multipart_form(self, value): # -> None:
        ...
    


