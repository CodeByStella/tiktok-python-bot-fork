"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Iterable, Mapping, Optional, Tuple, Union
from seleniumwire.thirdparty.mitmproxy.coretypes import multidict
from seleniumwire.thirdparty.mitmproxy.net.http import cookies, message
from seleniumwire.thirdparty.mitmproxy.net.http.headers import Headers

@dataclass
class ResponseData(message.MessageData):
    status_code: int
    reason: bytes
    ...


class Response(message.Message):
    """
    An HTTP response.
    """
    data: ResponseData
    def __init__(self, http_version: bytes, status_code: int, reason: bytes, headers: Union[Headers, Tuple[Tuple[bytes, bytes], ...]], content: Optional[bytes], trailers: Union[None, Headers, Tuple[Tuple[bytes, bytes], ...]], timestamp_start: float, timestamp_end: Optional[float]) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @classmethod
    def make(cls, status_code: int = ..., content: Union[bytes, str] = ..., headers: Union[Headers, Mapping[str, Union[str, bytes]], Iterable[Tuple[bytes, bytes]]] = ...) -> Response:
        """
        Simplified API for creating response objects.
        """
        ...
    
    @property
    def status_code(self) -> int:
        """
        HTTP Status Code, e.g. ``200``.
        """
        ...
    
    @status_code.setter
    def status_code(self, status_code: int) -> None:
        ...
    
    @property
    def reason(self) -> str:
        """
        HTTP Reason Phrase, e.g. "Not Found".
        HTTP/2 responses do not contain a reason phrase, an empty string will be returned instead.
        """
        ...
    
    @reason.setter
    def reason(self, reason: Union[str, bytes]) -> None:
        ...
    
    @property
    def cookies(self) -> multidict.MultiDictView:
        """
        The response cookies. A possibly empty
        :py:class:`~seleniumwire.thirdparty.mitmproxy.net.multidict.MultiDictView`,
        where the keys are cookie name strings, and values are (value, attr) tuples.
        Value is a string, and attr is an MultiDictView containing cookie attributes.
        Within attrs, unary attributes (e.g. HTTPOnly) are indicated by a Null value.

        Caveats:
            Updating the attr
        """
        ...
    
    @cookies.setter
    def cookies(self, value): # -> None:
        ...
    
    def refresh(self, now=...): # -> None:
        """
        This fairly complex and heuristic function refreshes a server
        response for replay.

            - It adjusts date, expires and last-modified headers.
            - It adjusts cookie expiration.
        """
        ...
    


