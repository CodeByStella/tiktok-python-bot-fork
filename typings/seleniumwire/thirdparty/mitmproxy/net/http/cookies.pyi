"""
This type stub file was generated by pyright.
"""

from typing import Iterable, List, Tuple
from seleniumwire.thirdparty.mitmproxy.coretypes import multidict

_cookie_params = ...
ESCAPE = ...
class CookieAttrs(multidict.MultiDict):
    ...


TSetCookie = Tuple[str, str, CookieAttrs]
TPairs = List[List[str]]
def parse_cookie_header(line): # -> list[Any]:
    """
        Parse a Cookie header value.
        Returns a list of (lhs, rhs) tuples.
    """
    ...

def parse_cookie_headers(cookie_headers): # -> list[Any]:
    ...

def format_cookie_header(lst): # -> str:
    """
        Formats a Cookie header value.
    """
    ...

def parse_set_cookie_header(line: str) -> List[TSetCookie]:
    """
    Parse a Set-Cookie header value

    Returns:
        A list of (name, value, attrs) tuples, where attrs is a
        CookieAttrs dict of attributes. No attempt is made to parse attribute
        values - they are treated purely as strings.
    """
    ...

def parse_set_cookie_headers(headers: Iterable[str]) -> List[TSetCookie]:
    ...

def format_set_cookie_header(set_cookies: List[TSetCookie]) -> str:
    """
        Formats a Set-Cookie header value.
    """
    ...

def refresh_set_cookie_header(c: str, delta: int) -> str:
    """
    Args:
        c: A Set-Cookie string
        delta: Time delta in seconds
    Returns:
        A refreshed Set-Cookie string
    Raises:
        ValueError, if the cookie is invalid.
    """
    ...

def get_expiration_ts(cookie_attrs): # -> int | float | None:
    """
        Determines the time when the cookie will be expired.

        Considering both 'expires' and 'max-age' parameters.

        Returns: timestamp of when the cookie will expire.
                 None, if no expiration time is set.
    """
    ...

def is_expired(cookie_attrs): # -> bool:
    """
        Determines whether a cookie has expired.

        Returns: boolean
    """
    ...

def group_cookies(pairs): # -> list[Any]:
    """
    Converts a list of pairs to a (name, value, attrs) for each cookie.
    """
    ...

