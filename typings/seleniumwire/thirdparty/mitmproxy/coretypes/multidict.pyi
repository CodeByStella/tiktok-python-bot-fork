"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta
from collections.abc import MutableMapping
from seleniumwire.thirdparty.mitmproxy.coretypes import serializable

class _MultiDict(MutableMapping, metaclass=ABCMeta):
    def __repr__(self): # -> str:
        ...
    
    def __getitem__(self, key): # -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def get_all(self, key): # -> list[Any]:
        """
        Return the list of all values for a given key.
        If that key is not in the MultiDict, the return value will be an empty list.
        """
        ...
    
    def set_all(self, key, values): # -> None:
        """
        Remove the old values for a key and add new ones.
        """
        ...
    
    def add(self, key, value): # -> None:
        """
        Add an additional value for the given key at the bottom.
        """
        ...
    
    def insert(self, index, key, value): # -> None:
        """
        Insert an additional value for the given key at the specified position.
        """
        ...
    
    def keys(self, multi=...): # -> Generator[Any, None, None]:
        """
        Get all keys.

        Args:
            multi(bool):
                If True, one key per value will be returned.
                If False, duplicate keys will only be returned once.
        """
        ...
    
    def values(self, multi=...): # -> Generator[Any, None, None]:
        """
        Get all values.

        Args:
            multi(bool):
                If True, all values will be returned.
                If False, only the first value per key will be returned.
        """
        ...
    
    def items(self, multi=...): # -> tuple[Any | tuple[Any, Any], ...] | tuple[Any, ...] | ItemsView[Any, Any]:
        """
        Get all (key, value) tuples.

        Args:
            multi(bool):
                If True, all (key, value) pairs will be returned
                If False, only the first (key, value) pair per unique key will be returned.
        """
        ...
    


class MultiDict(_MultiDict, serializable.Serializable):
    def __init__(self, fields=...) -> None:
        ...
    
    def get_state(self): # -> tuple[tuple[Any, ...], ...]:
        ...
    
    def set_state(self, state): # -> None:
        ...
    
    @classmethod
    def from_state(cls, state): # -> Self:
        ...
    


class MultiDictView(_MultiDict):
    """
    The MultiDictView provides the MultiDict interface over calculated data.
    The view itself contains no state - data is retrieved from the parent on
    request, and stored back to the parent on change.
    """
    def __init__(self, getter, setter) -> None:
        ...
    
    @property
    def fields(self):
        ...
    
    @fields.setter
    def fields(self, value): # -> None:
        ...
    
    def copy(self): # -> MultiDict:
        ...
    


