"""
This type stub file was generated by pyright.
"""

from typing import Optional, Union
from seleniumwire.thirdparty.mitmproxy import flow
from seleniumwire.thirdparty.mitmproxy.coretypes import serializable

class WebSocketMessage(serializable.Serializable):
    """
    A WebSocket message sent from one endpoint to the other.
    """
    def __init__(self, type: int, from_client: bool, content: Union[bytes, str], timestamp: Optional[float] = ..., killed: bool = ...) -> None:
        ...
    
    @classmethod
    def from_state(cls, state): # -> Self:
        ...
    
    def get_state(self): # -> tuple[int, bool | Any, bytes | str | Any, float, bool | Any]:
        ...
    
    def set_state(self, state): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def kill(self): # -> None:
        """
        Kill this message.

        It will not be sent to the other endpoint. This has no effect in streaming mode.
        """
        ...
    


class WebSocketFlow(flow.Flow):
    """
    A WebSocketFlow is a simplified representation of a Websocket connection.
    """
    def __init__(self, client_conn, server_conn, handshake_flow, live=...) -> None:
        ...
    
    _stateobject_attributes = ...
    def get_state(self): # -> dict[Any, Any]:
        ...
    
    @classmethod
    def from_state(cls, state): # -> Self:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def message_info(self, message: WebSocketMessage) -> str:
        ...
    
    def inject_message(self, endpoint, payload): # -> None:
        """
        Inject and send a full WebSocket message to the remote endpoint.
        This might corrupt your WebSocket connection! Be careful!

        The endpoint needs to be either flow.client_conn or flow.server_conn.

        If ``payload`` is of type ``bytes`` then the message is flagged as
        being binary If it is of type ``str`` encoded as UTF-8 and sent as
        text.

        :param payload: The message body to send.
        :type payload: ``bytes`` or ``str``
        """
        ...
    


