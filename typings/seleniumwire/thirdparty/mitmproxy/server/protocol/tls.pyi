"""
This type stub file was generated by pyright.
"""

from typing import Optional, Union
from seleniumwire.thirdparty.mitmproxy.server.protocol import base

CIPHER_ID_NAME_MAP = ...
DEFAULT_CLIENT_CIPHERS = ...
class TlsLayer(base.Layer):
    """
    The TLS layer implements transparent TLS connections.

    It exposes the following API to child layers:

        - :py:meth:`set_server_tls` to modify TLS settings for the server connection.
        - :py:attr:`server_tls`, :py:attr:`server_sni` as read-only attributes describing the current TLS settings for
          the server connection.
    """
    def __init__(self, ctx, client_tls, server_tls, custom_server_sni=...) -> None:
        ...
    
    def __call__(self): # -> None:
        """
        The strategy for establishing TLS is as follows:
            First, we determine whether we need the server cert to establish ssl with the client.
            If so, we first connect to the server and then to the client.
            If not, we only connect to the client and do the server handshake lazily.

        An additional complexity is that we need to mirror SNI and ALPN from the client when connecting to the server.
        We manually peek into the connection and parse the ClientHello message to obtain these values.
        """
        ...
    
    def __repr__(self): # -> Literal['TlsLayer(client and server)', 'TlsLayer(client)', 'TlsLayer(server)', 'TlsLayer(inactive)']:
        ...
    
    def connect(self): # -> None:
        ...
    
    def set_server_tls(self, server_tls: bool, sni: Union[str, None, bool] = ...) -> None:
        """
        Set the TLS settings for the next server connection that will be established.
        This function will not alter an existing connection.

        Args:
            server_tls: Shall we establish TLS with the server?
            sni: ``str`` for a custom SNI value,
                ``None`` for the client SNI value,
                ``False`` if no SNI value should be sent.
        """
        ...
    
    @property
    def server_tls(self): # -> Any | bool:
        """
        ``True``, if the next server connection that will be established should be upgraded to TLS.
        """
        ...
    
    @property
    def server_sni(self) -> Optional[str]:
        """
        The Server Name Indication we want to send with the next server TLS handshake.
        """
        ...
    
    @property
    def alpn_for_client_connection(self): # -> Any:
        ...
    


