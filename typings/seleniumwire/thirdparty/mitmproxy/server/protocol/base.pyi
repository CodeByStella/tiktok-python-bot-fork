"""
This type stub file was generated by pyright.
"""

class _LayerCodeCompletion:
    """
    Dummy class that provides type hinting in PyCharm, which simplifies development a lot.
    """
    def __init__(self, **mixin_args) -> None:
        ...
    


class Layer(_LayerCodeCompletion):
    """
    Base class for all layers. All other protocol layers should inherit from this class.
    """
    def __init__(self, ctx, **mixin_args) -> None:
        """
        Each layer usually passes itself to its child layers as a context. Properties of the
        context are transparently mapped to the layer, so that the following works:

        .. code-block:: python

            root_layer = Layer(None)
            root_layer.client_conn = 42
            sub_layer = Layer(root_layer)
            print(sub_layer.client_conn) # 42

        The root layer is passed a :py:class:`seleniumwire.thirdparty.mitmproxy.server.RootContext` object,
        which provides access to
        :py:attr:`.client_conn <seleniumwire.thirdparty.mitmproxy.server.RootContext.client_conn>`,
        :py:attr:`.next_layer <seleniumwire.thirdparty.mitmproxy.server.RootContext.next_layer>`
        and other basic attributes.

        Args:
            ctx: The (read-only) parent layer / context.
        """
        ...
    
    def __call__(self):
        """Logic of the layer.

        Returns:
            Once the protocol has finished without exceptions.

        Raises:
            ~seleniumwire.thirdparty.mitmproxy.exceptions.ProtocolException: if an exception occurs.
            No other exceptions must be raised.
        """
        ...
    
    def __getattr__(self, name): # -> Any:
        """
        Attributes not present on the current layer are looked up on the context.
        """
        ...
    


class ServerConnectionMixin:
    """
    Mixin that provides a layer with the capabilities to manage a server connection.
    The server address can be passed in the constructor or set by calling :py:meth:`set_server`.
    Subclasses are responsible for calling :py:meth:`disconnect` before returning.

    Recommended Usage:

    .. code-block:: python

        class MyLayer(Layer, ServerConnectionMixin):
            def __call__(self):
                try:
                    # Do something.
                finally:
                    if self.server_conn.connected():
                        self.disconnect()
    """
    def __init__(self, server_address=...) -> None:
        ...
    
    def set_server(self, address): # -> None:
        """
        Sets a new server address. If there is an existing connection, it will be closed.
        """
        ...
    
    def disconnect(self): # -> None:
        """
        Deletes (and closes) an existing server connection.
        Must not be called if there is no existing connection.
        """
        ...
    
    def connect(self): # -> None:
        """
        Establishes a server connection.
        Must not be called if there is an existing connection.

        Raises:
            ~seleniumwire.thirdparty.mitmproxy.exceptions.ProtocolException:
            if the connection could not be established.
        """
        ...
    


