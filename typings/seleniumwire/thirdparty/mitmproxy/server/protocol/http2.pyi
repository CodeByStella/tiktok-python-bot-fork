"""
This type stub file was generated by pyright.
"""

import seleniumwire.thirdparty.mitmproxy.net.http
from typing import Any, Callable, Dict, List
from h2 import connection
from seleniumwire.thirdparty.mitmproxy import http
from seleniumwire.thirdparty.mitmproxy.coretypes import basethread
from seleniumwire.thirdparty.mitmproxy.net.http import headers
from seleniumwire.thirdparty.mitmproxy.server.protocol import base, http as httpbase

class SafeH2Connection(connection.H2Connection):
    def __init__(self, conn, *args, **kwargs) -> None:
        ...
    
    def safe_acknowledge_received_data(self, acknowledged_size: int, stream_id: int): # -> None:
        ...
    
    def safe_reset_stream(self, stream_id: int, error_code: int): # -> None:
        ...
    
    def safe_update_settings(self, new_settings: Dict[int, Any]): # -> None:
        ...
    
    def safe_send_headers(self, raise_zombie: Callable, stream_id: int, headers: headers.Headers, **kwargs): # -> None:
        ...
    
    def safe_send_body(self, raise_zombie: Callable, stream_id: int, chunks: List[bytes], end_stream=...): # -> None:
        ...
    


class Http2Layer(base.Layer):
    if False:
        ...
    class H2ConnLogger:
        def __init__(self, name, log) -> None:
            ...
        
        def debug(self, fmtstr, *args): # -> None:
            ...
        
        def trace(self, fmtstr, *args): # -> None:
            ...
        
    
    
    def __init__(self, ctx, mode: str) -> None:
        ...
    
    def next_layer(self):
        ...
    
    def __call__(self): # -> None:
        ...
    


def detect_zombie_stream(func): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
    ...

class Http2SingleStreamLayer(httpbase._HttpTransmissionLayer, basethread.BaseThread):
    class Message:
        def __init__(self, headers=...) -> None:
            ...
        
    
    
    def __init__(self, ctx, h2_connection, stream_id: int, request_headers: seleniumwire.thirdparty.mitmproxy.net.http.Headers) -> None:
        ...
    
    def kill(self): # -> None:
        ...
    
    def connect(self):
        ...
    
    def disconnect(self):
        ...
    
    def set_server(self, address):
        ...
    
    def check_close_connection(self, flow): # -> Literal[True]:
        ...
    
    @property
    def data_queue(self): # -> Queue[bytes]:
        ...
    
    @property
    def queued_data_length(self): # -> int:
        ...
    
    @queued_data_length.setter
    def queued_data_length(self, v): # -> None:
        ...
    
    @property
    def stream_ended(self): # -> Event:
        ...
    
    @property
    def trailers(self): # -> Headers | None:
        ...
    
    @trailers.setter
    def trailers(self, v): # -> None:
        ...
    
    def raise_zombie(self, pre_command=...): # -> None:
        ...
    
    @detect_zombie_stream
    def read_request_headers(self, flow): # -> HTTPRequest:
        ...
    
    @detect_zombie_stream
    def read_request_body(self, request): # -> Generator[bytes, Any, None]:
        ...
    
    @detect_zombie_stream
    def read_request_trailers(self, request): # -> Headers | None:
        ...
    
    @detect_zombie_stream
    def send_request_headers(self, request): # -> None:
        ...
    
    @detect_zombie_stream
    def send_request_body(self, request, chunks): # -> None:
        ...
    
    @detect_zombie_stream
    def send_request_trailers(self, request): # -> None:
        ...
    
    @detect_zombie_stream
    def send_request(self, request): # -> None:
        ...
    
    @detect_zombie_stream
    def read_response_headers(self): # -> HTTPResponse:
        ...
    
    @detect_zombie_stream
    def read_response_body(self, request, response): # -> Generator[bytes, Any, None]:
        ...
    
    @detect_zombie_stream
    def read_response_trailers(self, request, response): # -> Headers | None:
        ...
    
    @detect_zombie_stream
    def send_response_headers(self, response): # -> None:
        ...
    
    @detect_zombie_stream
    def send_response_body(self, response, chunks): # -> None:
        ...
    
    @detect_zombie_stream
    def send_response_trailers(self, response): # -> None:
        ...
    
    def __call__(self):
        ...
    
    def run(self): # -> None:
        ...
    


