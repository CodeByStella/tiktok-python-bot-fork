"""
This type stub file was generated by pyright.
"""

from seleniumwire.thirdparty.mitmproxy import connections, stateobject

class Error(stateobject.StateObject):
    """
        An Error.

        This is distinct from an protocol error response (say, a HTTP code 500),
        which is represented by a normal HTTPResponse object. This class is
        responsible for indicating errors that fall outside of normal protocol
        communications, like interrupted connections, timeouts, protocol errors.

        Exposes the following attributes:

            msg: Message describing the error
            timestamp: Seconds since the epoch
    """
    KILLED_MESSAGE = ...
    def __init__(self, msg: str, timestamp=...) -> None:
        """
        @type msg: str
        @type timestamp: float
        """
        ...
    
    _stateobject_attributes = ...
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @classmethod
    def from_state(cls, state): # -> Self:
        ...
    


class Flow(stateobject.StateObject):
    """
    A Flow is a collection of objects representing a single transaction.
    This class is usually subclassed for each protocol, e.g. HTTPFlow.
    """
    def __init__(self, type: str, client_conn: connections.ClientConnection, server_conn: connections.ServerConnection, live: bool = ...) -> None:
        ...
    
    _stateobject_attributes = ...
    def get_state(self): # -> dict[Any, Any]:
        ...
    
    def set_state(self, state): # -> None:
        ...
    
    @classmethod
    def from_state(cls, state): # -> Self:
        ...
    
    def copy(self): # -> Self:
        ...
    
    def modified(self): # -> bool:
        """
            Has this Flow been modified?
        """
        ...
    
    def backup(self, force=...): # -> None:
        """
            Save a backup of this Flow, which can be reverted to using a
            call to .revert().
        """
        ...
    
    def revert(self): # -> None:
        """
            Revert to the last backed up state.
        """
        ...
    
    @property
    def killable(self): # -> bool | None:
        ...
    
    def kill(self): # -> None:
        """
            Kill this request.
        """
        ...
    
    def intercept(self): # -> None:
        """
            Intercept this Flow. Processing will stop until resume is
            called.
        """
        ...
    
    def resume(self): # -> None:
        """
            Continue with the flow - called after an intercept().
        """
        ...
    
    @property
    def timestamp_start(self) -> float:
        """Start time of the flow."""
        ...
    


