"""
This type stub file was generated by pyright.
"""

import contextlib
import typing
import OpenSSL
from pyasn1.type import univ
from seleniumwire.thirdparty.mitmproxy.coretypes import serializable

DEFAULT_EXP = ...
DEFAULT_EXP_DUMMY_CERT = ...
DEFAULT_DHPARAM = ...
def create_ca(organization, cn, exp, key_size): # -> tuple[PKey, X509]:
    ...

def dummy_cert(privkey, cacert, commonname, sans, organization): # -> Cert:
    """
        Generates a dummy certificate.

        privkey: CA private key
        cacert: CA certificate
        commonname: Common name for the generated certificate.
        sans: A list of Subject Alternate Names.
        organization: Organization name for the generated certificate.

        Returns cert if operation succeeded, None if not.
    """
    ...

class CertStoreEntry:
    def __init__(self, cert, privatekey, chain_file) -> None:
        ...
    


TCustomCertId = bytes
TGeneratedCertId = typing.Tuple[typing.Optional[bytes], typing.Tuple[bytes, ...]]
TCertId = typing.Union[TCustomCertId, TGeneratedCertId]
class CertStore:
    """
        Implements an in-memory certificate store.
    """
    STORE_CAP = ...
    def __init__(self, default_privatekey, default_ca, default_chain_file, dhparams) -> None:
        ...
    
    def expire(self, entry): # -> None:
        ...
    
    @staticmethod
    def load_dhparam(path): # -> None:
        ...
    
    @classmethod
    def from_store(cls, path, basename, key_size, passphrase: typing.Optional[bytes] = ...): # -> Self:
        ...
    
    @staticmethod
    @contextlib.contextmanager
    def umask_secret(): # -> Generator[None, Any, None]:
        """
            Context to temporarily set umask to its original value bitor 0o77.
            Useful when writing private keys to disk so that only the owner
            will be able to read them.
        """
        ...
    
    @staticmethod
    def create_store(path, basename, key_size, organization=..., cn=..., expiry=...): # -> tuple[PKey, X509]:
        ...
    
    def add_cert_file(self, spec: str, path: str, passphrase: typing.Optional[bytes] = ...) -> None:
        ...
    
    def add_cert(self, entry: CertStoreEntry, *names: bytes): # -> None:
        """
            Adds a cert to the certstore. We register the CN in the cert plus
            any SANs, and also the list of names provided as an argument.
        """
        ...
    
    @staticmethod
    def asterisk_forms(dn: bytes) -> typing.List[bytes]:
        """
        Return all asterisk forms for a domain. For example, for www.example.com this will return
        [b"www.example.com", b"*.example.com", b"*.com"]. The single wildcard "*" is omitted.
        """
        ...
    
    def get_cert(self, commonname: typing.Optional[bytes], sans: typing.List[bytes], organization: typing.Optional[bytes] = ...) -> typing.Tuple[Cert, OpenSSL.SSL.PKey, str]:
        """
            Returns an (cert, privkey, cert_chain) tuple.

            commonname: Common name for the generated certificate. Must be a
            valid, plain-ASCII, IDNA-encoded domain name.

            sans: A list of Subject Alternate Names.

            organization: Organization name for the generated certificate.
        """
        ...
    


class _GeneralName(univ.Choice):
    componentType = ...


class _GeneralNames(univ.SequenceOf):
    componentType = ...
    sizeSpec = ...


class Cert(serializable.Serializable):
    def __init__(self, cert) -> None:
        """
            Returns a (common name, [subject alternative names]) tuple.
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def get_state(self): # -> bytes:
        ...
    
    def set_state(self, state): # -> None:
        ...
    
    @classmethod
    def from_state(cls, state): # -> Self:
        ...
    
    @classmethod
    def from_pem(cls, txt): # -> Self:
        ...
    
    @classmethod
    def from_der(cls, der): # -> Self:
        ...
    
    def to_pem(self): # -> bytes:
        ...
    
    def digest(self, name): # -> bytes:
        ...
    
    @property
    def issuer(self): # -> list[tuple[bytes, bytes]]:
        ...
    
    @property
    def notbefore(self): # -> datetime:
        ...
    
    @property
    def notafter(self): # -> datetime:
        ...
    
    @property
    def has_expired(self): # -> bool:
        ...
    
    @property
    def subject(self): # -> list[tuple[bytes, bytes]]:
        ...
    
    @property
    def serial(self): # -> int:
        ...
    
    @property
    def keyinfo(self): # -> tuple[str, int | Any]:
        ...
    
    @property
    def cn(self): # -> bytes | None:
        ...
    
    @property
    def organization(self): # -> bytes | None:
        ...
    
    @property
    def altnames(self): # -> list[Any]:
        """
        Returns:
            All DNS altnames.
        """
        ...
    


