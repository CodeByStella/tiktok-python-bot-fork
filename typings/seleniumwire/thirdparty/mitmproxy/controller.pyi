"""
This type stub file was generated by pyright.
"""

class Channel:
    """
        The only way for the mitmproxy server to communicate with the master
        is to use the channel it has been given.
    """
    def __init__(self, master, loop, should_exit) -> None:
        ...
    
    def ask(self, mtype, m): # -> None:
        """
        Decorate a message with a reply attribute, and send it to the master.
        Then wait for a response.

        Raises:
            exceptions.Kill: All connections should be closed immediately.
        """
        ...
    
    def tell(self, mtype, m): # -> None:
        """
        Decorate a message with a dummy reply attribute, send it to the master,
        then return immediately.
        """
        ...
    


NO_REPLY = ...
class Reply:
    """
    Messages sent through a channel are decorated with a "reply" attribute. This
    object is used to respond to the message through the return channel.
    """
    def __init__(self, obj) -> None:
        ...
    
    @property
    def state(self): # -> str:
        """
        The state the reply is currently in. A normal reply object goes
        sequentially through the following lifecycle:

            1. start: Initial State.
            2. taken: The reply object has been taken to be committed.
            3. committed: The reply has been sent back to the requesting party.

        This attribute is read-only and can only be modified by calling one of
        state transition functions.
        """
        ...
    
    @property
    def has_message(self): # -> bool:
        ...
    
    def take(self): # -> None:
        """
        Scripts or other parties make "take" a reply out of a normal flow.
        For example, intercepted flows are taken out so that the connection thread does not proceed.
        """
        ...
    
    def commit(self): # -> None:
        """
        Ultimately, messages are committed. This is done either automatically by
        the handler if the message is not taken or manually by the entity which
        called .take().
        """
        ...
    
    def ack(self, force=...): # -> None:
        ...
    
    def kill(self, force=...): # -> None:
        ...
    
    def send(self, msg, force=...): # -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    


class DummyReply(Reply):
    """
    A reply object that is not connected to anything. In contrast to regular
    Reply objects, DummyReply objects are reset to "start" at the end of an
    handler so that they can be used multiple times. Useful when we need an
    object to seem like it has a channel, and during testing.
    """
    def __init__(self) -> None:
        ...
    
    def mark_reset(self): # -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    


