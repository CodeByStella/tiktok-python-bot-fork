"""
This type stub file was generated by pyright.
"""

import contextlib
import typing

unset = ...
class _Option:
    __slots__ = ...
    def __init__(self, name: str, typespec: typing.Union[type, object], default: typing.Any, help: str, choices: typing.Optional[typing.Sequence[str]]) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def default(self): # -> Any:
        ...
    
    def current(self) -> typing.Any:
        ...
    
    def set(self, value: typing.Any) -> None:
        ...
    
    def reset(self) -> None:
        ...
    
    def has_changed(self) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __deepcopy__(self, _): # -> _Option:
        ...
    


class OptManager:
    """
        OptManager is the base class from which Options objects are derived.

        .changed is a blinker Signal that triggers whenever options are
        updated. If any handler in the chain raises an exceptions.OptionsError
        exception, all changes are rolled back, the exception is suppressed,
        and the .errored signal is notified.

        Optmanager always returns a deep copy of options to ensure that
        mutation doesn't change the option state inadvertently.
    """
    def __init__(self) -> None:
        ...
    
    def add_option(self, name: str, typespec: typing.Union[type, object], default: typing.Any, help: str, choices: typing.Optional[typing.Sequence[str]] = ...) -> None:
        ...
    
    @contextlib.contextmanager
    def rollback(self, updated, reraise=...): # -> Generator[None, Any, None]:
        ...
    
    def subscribe(self, func, opts): # -> None:
        """
            Subscribe a callable to the .changed signal, but only for a
            specified list of options. The callable should accept arguments
            (options, updated), and may raise an OptionsError.

            The event will automatically be unsubscribed if the callable goes out of scope.
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __deepcopy__(self, memodict=...): # -> OptManager:
        ...
    
    __copy__ = ...
    def __getattr__(self, attr): # -> Any:
        ...
    
    def __setattr__(self, attr, value): # -> None:
        ...
    
    def keys(self): # -> set[str]:
        ...
    
    def items(self): # -> dict_items[str, Any]:
        ...
    
    def __contains__(self, k): # -> bool:
        ...
    
    def reset(self): # -> None:
        """
            Restore defaults for all options.
        """
        ...
    
    def update_known(self, **kwargs): # -> dict[Any, Any]:
        """
            Update and set all known options from kwargs. Returns a dictionary
            of unknown options.
        """
        ...
    
    def update_defer(self, **kwargs): # -> None:
        ...
    
    def update(self, **kwargs): # -> None:
        ...
    
    def setter(self, attr): # -> Callable[..., None]:
        """
            Generate a setter for a given attribute. This returns a callable
            taking a single argument.
        """
        ...
    
    def toggler(self, attr): # -> Callable[[], None]:
        """
            Generate a toggler for a boolean attribute. This returns a callable
            that takes no arguments.
        """
        ...
    
    def default(self, option: str) -> typing.Any:
        ...
    
    def has_changed(self, option): # -> Any:
        """
            Has the option changed from the default?
        """
        ...
    
    def merge(self, opts): # -> None:
        """
            Merge a dict of options into this object. Options that have None
            value are ignored. Lists and tuples are appended to the current
            option value.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def set(self, *spec, defer=...): # -> None:
        """
            Takes a list of set specification in standard form (option=value).
            Options that are known are updated immediately. If defer is true,
            options that are not known are deferred, and will be set once they
            are added.
        """
        ...
    
    def process_deferred(self): # -> None:
        """
            Processes options that were deferred in previous calls to set, and
            have since been added.
        """
        ...
    
    def parse_setval(self, o: _Option, optstr: typing.Optional[str]) -> typing.Any:
        """
            Convert a string to a value appropriate for the option type.
        """
        ...
    
    def make_parser(self, parser, optname, metavar=..., short=...): # -> None:
        """
            Auto-Create a command-line parser entry for a named option. If the
            option does not exist, it is ignored.
        """
        ...
    


def dump_dicts(opts, keys: typing.List[str] = ...): # -> dict[Any, Any]:
    """
        Dumps the options into a list of dict object.

        Return: A list like: { "anticache": { type: "bool", default: false, value: true, help: "help text"} }
    """
    ...

