"""
This type stub file was generated by pyright.
"""

"""
We try to be very hygienic regarding the exceptions we throw:

- Every exception that might be externally visible to users shall be a subclass
  of MitmproxyException.p
- Every exception in the base net module shall be a subclass
  of NetlibException, and will not be propagated directly to users.

See also: http://lucumr.pocoo.org/2014/10/16/on-error-handling/
"""
class MitmproxyException(Exception):
    """
    Base class for all exceptions thrown by mitmproxy.
    """
    def __init__(self, message=...) -> None:
        ...
    


class Kill(MitmproxyException):
    """
    Signal that both client and server connection(s) should be killed immediately.
    """
    ...


class ProtocolException(MitmproxyException):
    """
    ProtocolExceptions are caused by invalid user input, unavailable network resources,
    or other events that are outside of our influence.
    """
    ...


class TlsProtocolException(ProtocolException):
    ...


class ClientHandshakeException(TlsProtocolException):
    def __init__(self, message, server) -> None:
        ...
    


class InvalidServerCertificate(TlsProtocolException):
    def __repr__(self): # -> str:
        ...
    


class Socks5ProtocolException(ProtocolException):
    ...


class HttpProtocolException(ProtocolException):
    ...


class Http2ProtocolException(ProtocolException):
    ...


class Http2ZombieException(ProtocolException):
    ...


class ServerException(MitmproxyException):
    ...


class ContentViewException(MitmproxyException):
    ...


class ReplayException(MitmproxyException):
    ...


class FlowReadException(MitmproxyException):
    ...


class ControlException(MitmproxyException):
    ...


class SetServerNotAllowedException(MitmproxyException):
    ...


class CommandError(Exception):
    ...


class OptionsError(MitmproxyException):
    ...


class AddonManagerError(MitmproxyException):
    ...


class AddonHalt(MitmproxyException):
    """
        Raised by addons to signal that no further handlers should handle this event.
    """
    ...


class TypeError(MitmproxyException):
    ...


class NetlibException(MitmproxyException):
    """
    Base class for all exceptions thrown by mitmproxy.net.
    """
    def __init__(self, message=...) -> None:
        ...
    


class SessionLoadException(MitmproxyException):
    ...


class Disconnect:
    """Immediate EOF"""
    ...


class HttpException(NetlibException):
    ...


class HttpReadDisconnect(HttpException, Disconnect):
    ...


class HttpSyntaxException(HttpException):
    ...


class TcpException(NetlibException):
    ...


class TcpDisconnect(TcpException, Disconnect):
    ...


class TcpReadIncomplete(TcpException):
    ...


class TcpTimeout(TcpException):
    ...


class TlsException(NetlibException):
    ...


class InvalidCertificateException(TlsException):
    ...


class Timeout(TcpException):
    ...


