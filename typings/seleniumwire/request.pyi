"""
This type stub file was generated by pyright.
"""

from datetime import datetime
from http.client import HTTPMessage
from typing import Dict, Iterable, List, Tuple, Union

"""Houses the classes used to transfer request and response data between components. """
class HTTPHeaders(HTTPMessage):
    """A dict-like data-structure to hold HTTP headers.

    Note that duplicate key names are permitted.
    """
    def __repr__(self): # -> str:
        ...
    


class Request:
    """Represents an HTTP request."""
    def __init__(self, *, method: str, url: str, headers: Iterable[Tuple[str, str]], body: bytes = ...) -> None:
        """Initialise a new Request object.

        Args:
            method: The request method - GET, POST etc.
            url: The request URL.
            headers: The request headers as an iterable of 2-element tuples.
            body: The request body as bytes.
        """
        ...
    
    @property
    def body(self) -> bytes:
        """Get the request body.

        Returns: The request body as bytes.
        """
        ...
    
    @body.setter
    def body(self, b: bytes): # -> None:
        ...
    
    @property
    def querystring(self) -> str:
        """Get the query string from the request.

        Returns: The query string.
        """
        ...
    
    @querystring.setter
    def querystring(self, qs: str): # -> None:
        ...
    
    @property
    def params(self) -> Dict[str, Union[str, List[str]]]:
        """Get the request parameters.

        Parameters are returned as a dictionary. Each dictionary entry will have a single
        string value, unless a parameter happens to occur more than once in the request,
        in which case the value will be a list of strings.

        Returns: A dictionary of request parameters.
        """
        ...
    
    @params.setter
    def params(self, p: Dict[str, Union[str, List[str]]]): # -> None:
        ...
    
    @property
    def path(self) -> str:
        """Get the request path.

        Returns: The request path.
        """
        ...
    
    @property
    def host(self) -> str:
        """Get the request host.

        Returns: The request host.
        """
        ...
    
    @path.setter
    def path(self, p: str): # -> None:
        ...
    
    def create_response(self, status_code: int, headers: Union[Dict[str, str], Iterable[Tuple[str, str]]] = ..., body: bytes = ...): # -> None:
        """Create a response object and attach it to this request."""
        ...
    
    def abort(self, error_code: int = ...): # -> None:
        """Convenience method for signalling that this request is to be terminated
        with a specific error code.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


class Response:
    """Represents an HTTP response."""
    def __init__(self, *, status_code: int, reason: str, headers: Iterable[Tuple[str, str]], body: bytes = ...) -> None:
        """Initialise a new Response object.

        Args:
            status_code: The status code.
            reason: The reason message (e.g. "OK" or "Not Found").
            headers: The response headers as an iterable of 2-element tuples.
            body: The response body as bytes.
        """
        ...
    
    @property
    def body(self) -> bytes:
        """Get the response body.

        Returns: The response body as bytes.
        """
        ...
    
    @body.setter
    def body(self, b: bytes): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


class WebSocketMessage:
    """Represents a websocket message transmitted between client and server
    or vice versa.
    """
    def __init__(self, *, from_client: bool, content: Union[str, bytes], date: datetime) -> None:
        """Initialise a new websocket message.

        Args:
            from_client: True if the message was sent by the client.
            content: The text or binary message data.
            date: The datetime the message was sent or received.
        """
        ...
    
    def __str__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


